{"version":3,"sources":["app/moviesSlice.js","components/StarRating/index.js","lib/getOffset.js","lib/constants.js","components/MovieCard/index.js","components/MovieSection/index.js","lib/debounce.js","components/Search/index.js","components/ScrollToTopBtn/index.js","components/App/index.js","app/store.js","serviceWorker.js","index.js"],"names":["getMovies","query","page","a","key","process","url","axios","get","results","getMoviesAsync","createAsyncThunk","response","data","totalPages","total_pages","moviesSlice","createSlice","name","initialState","status","reducers","setQuery","state","action","payload","clearMovieResults","extraReducers","builder","addCase","pending","fulfilled","actions","Star","marked","starId","data-star-id","className","StarRating","value","useState","parseInt","rating","selection","Array","from","length","v","i","getOffset","currentWidth","minCharLen","maxCharLen","minWidth","maxWidth","ratio","Math","floor","breakpoints","MovieCard","entry","React","window","innerWidth","width","setWidth","readMore","setReadMore","setMaxCharLen","original_title","poster_path","overview","release_date","vote_average","vote_count","handleResize","useEffect","addEventListener","result","description","slug","year","Date","getFullYear","readLink","descripClassName","substring","href","id","alt","src","loading","target","onClick","MovieSection","dispatch","useDispatch","useSelector","movies","resultsStr","dataLength","hasMore","scrollThreshold","next","loader","endMessage","map","debounce","func","timer","timeout","args","clearTimeout","setTimeout","apply","Search","onChangeHandler","useRef","e","type","placeholder","onChange","current","ScollToTopBtn","shouldShowBtn","setShouldShowBtn","onscroll","document","body","scrollTop","documentElement","App","store","configureStore","reducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2de6d56.chunk.js","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst getMovies = async (query, page) => {\n  const key = process.env.REACT_APP_API_KEY;\n  let url;\n  if (query) {\n    url = `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&page=${page}&include_adult=false&query=${query}`;\n  } else {\n    url = `https://api.themoviedb.org/3/movie/popular?api_key=${key}&language=en-US&page=${page}`;\n  }\n  const results = await axios.get(url);\n  return results;\n};\n\nconst initialState = {\n  status: 'idle',\n  results: [],\n  query: '',\n  page: 1,\n  totalPages: 1,\n};\n\nexport const getMoviesAsync = createAsyncThunk(\n  'movies/getMovies',\n  async ({ query, page = 1 }) => {\n    const response = await getMovies(query, page);\n    return {\n      results: response.data.results,\n      page: response.data.page,\n      totalPages: response.data.total_pages,\n      query,\n    };\n  }\n);\n\nexport const moviesSlice = createSlice({\n  name: 'movies',\n  initialState,\n  reducers: {\n    setQuery: (state, action) => {\n      state.query = action.payload;\n    },\n    clearMovieResults: (state, action) => {\n      state.query = '';\n      state.results = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getMoviesAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getMoviesAsync.fulfilled, (state, action) => {\n        const { results, page, totalPages, query } = action.payload;\n        state.status = 'idle';\n        if (page > 1) {\n          state.results = [...state.results, ...results];\n        } else {\n          state.results = results;\n        }\n        state.page = page;\n        state.query = query;\n        state.totalPages = totalPages;\n      });\n  },\n});\n\n\nexport const { setQuery } = moviesSlice.actions;\n\nexport default moviesSlice.reducer;\n","import React, { useState } from 'react';\nimport './StarRating.scss';\n\nconst Star = ({ marked, starId }) => {\n  return (\n    <span data-star-id={starId} className=\"star\">\n      {marked ? '\\u2605' : '\\u2606'}\n    </span>\n  );\n};\n\nconst StarRating = ({ value }) => {\n  const [rating, setRating] = useState(parseInt(value) || 0);\n  const [selection, setSelection] = useState(0);\n\n  const hoverOver = event => {\n    let val = 0;\n    if (event && event.target && event.target.getAttribute('data-star-id'))\n      val = event.target.getAttribute('data-star-id');\n    setSelection(val);\n  };\n  return (\n    <div\n      className=\"star-rating\"\n      // onMouseOut={() => hoverOver(null)}\n      // onClick={e => setRating(e.target.getAttribute('data-star-id') || rating)}\n      // onMouseOver={hoverOver}\n    >\n      {Array.from({ length: 5 }, (v, i) => (\n        <Star\n          starId={i + 1}\n          key={`star_${i + 1}`}\n          marked={selection ? selection >= i + 1 : rating >= i + 1}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default StarRating;\n","const getOffset = (currentWidth, minCharLen, maxCharLen, minWidth, maxWidth) => {\n  const ratio = (maxCharLen - minCharLen) / (maxWidth - minWidth);\n  const result = Math.floor(ratio * (currentWidth - minWidth));\n  return result || 0;\n};\n\nexport default getOffset;\n","// Breakpoints\n\nconst MOBILE = 320;\nconst TABLET = 480;\nconst DESKTOP_SM = 768;\nconst DESKTOP_MD = 1024;\nconst DESKTOP_LG = 1300;\nconst DESKTOP_XL = 1600;\n\nexport const breakpoints = {\n  MOBILE,\n  TABLET,\n  DESKTOP_SM,\n  DESKTOP_MD,\n  DESKTOP_LG,\n  DESKTOP_XL,\n};\n","import React, { useEffect, useState } from 'react';\nimport StarRating from '../StarRating';\nimport getOffset from '../../lib/getOffset';\nimport { breakpoints } from '../../lib/constants';\nimport './MovieCard.scss';\n\nconst MovieCard = ({ entry }) => {\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [readMore, setReadMore] = useState(false);\n  const [maxCharLen, setMaxCharLen] = useState(100);\n  const {\n    original_title = '',\n    poster_path = '',\n    overview = '',\n    release_date,\n    vote_average = 5,\n    vote_count = 0,\n  } = entry;\n\n  const handleResize = () => {\n    setWidth(window.innerWidth);\n  };\n\n  const getImgPosterPath = (slug) => {\n    const { MOBILE } = breakpoints;\n    let url;\n    if (slug) {\n      if (width > MOBILE) {\n        url = `https://image.tmdb.org/t/p/w400${slug}`;\n      } else {\n        url = `https://image.tmdb.org/t/p/w200${slug}`;\n      }\n    } else {\n      url = `https://via.placeholder.com/300x400/000000/FFFFFF/?text=No+Poster+Image+Found`;\n    }\n    return url;\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize, false);\n  }, []);\n\n  useEffect(() => {\n    let result, minCharLen, maxCharLen, minWidth, maxWidth;\n\n    const { MOBILE, TABLET, DESKTOP_MD, DESKTOP_LG, DESKTOP_XL } = breakpoints;\n\n    if (width >= TABLET && width <= DESKTOP_MD) {\n      minCharLen = 30;\n      maxCharLen = 220;\n      minWidth = TABLET;\n      maxWidth = DESKTOP_MD;\n    } else if (width > DESKTOP_MD && width < DESKTOP_LG) {\n      minCharLen = 40;\n      maxCharLen = 100;\n      minWidth = DESKTOP_MD;\n      maxWidth = DESKTOP_LG;\n    } else if (width >= DESKTOP_XL) {\n      result = 60;\n    } else if (width <= MOBILE) {\n      result = 30;\n    } else {\n      minCharLen = 10;\n      maxCharLen = 50;\n      minWidth = 0;\n      maxWidth = 480;\n    }\n\n    if (!result) {\n      result =\n        minCharLen +\n        getOffset(width, minCharLen, maxCharLen, minWidth, maxWidth);\n    }\n    setMaxCharLen(result);\n  }, [width]);\n\n  const year = release_date ? new Date(release_date).getFullYear() : '';\n  const readLink = readMore ? 'Read Less' : 'Read More';\n\n  let descripClassName = 'description';\n  if (overview.length > maxCharLen && readMore) {\n    descripClassName += ' expanded';\n  }\n\n  let description;\n  if (overview) {\n    description = (\n      <>\n        {!readMore && overview.length > maxCharLen\n          ? overview.substring(0, maxCharLen) + '... '\n          : overview}\n      </>\n    );\n  } else {\n    description = <em>No description available</em>;\n  }\n\n  return (\n    <div className=\"movie-card\">\n      <div className=\"movie-img\">\n        <a\n          href={`https://www.themoviedb.org/movie/${entry.id}`}\n          alt={`${original_title} - The Movie Database`}\n        >\n          <img\n            src={getImgPosterPath(poster_path)}\n            alt={`Poster for ${original_title}`}\n            loading=\"lazy\"\n            target=\"_blank\"\n          ></img>\n        </a>\n      </div>\n      <div className=\"movie-details\">\n        <h3 className=\"title\">\n          <a\n            href={`https://www.themoviedb.org/movie/${entry.id}`}\n            target=\"_blank\"\n            alt={`${original_title} - The Movie Database`}\n          >\n            {original_title}\n          </a>\n        </h3>\n        <div>{year}</div>\n        <p className={descripClassName}>\n          <span>{description}</span>\n        </p>\n        {overview.length > maxCharLen && (\n          <a\n            className=\"read-more-link\"\n            onClick={() => {\n              setReadMore(!readMore);\n            }}\n            alt={'Expand'}\n          >\n            {' '}\n            <span>{readLink}</span>\n          </a>\n        )}\n        <div className=\"ratings\">\n          <StarRating value={vote_average / 2} />\n          {vote_count ? (\n            <span className=\"ratings-count\">{vote_count} ratings</span>\n          ) : (\n            <span className=\"ratings-count\">No ratings</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport './MovieSection.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { getMoviesAsync } from '../../app/moviesSlice';\nimport MovieCard from '../MovieCard';\n\nconst MovieSection = () => {\n  const dispatch = useDispatch();\n  const { results, query, page, totalPages, status } = useSelector(\n    ({ movies: { results, query, page, totalPages, status } }) => ({\n      results,\n      query,\n      page,\n      totalPages,\n      status\n    })\n  );\n\n  const resultsStr =\n    results && results.length && results.length === 1 ? 'result' : 'results';\n\n  if (query && results && !results.length && status !== 'loading') {\n    // No results page\n    return (\n      <div id=\"movie-section\" className=\"movie-section empty\">\n        <img src=\"/popcorn.svg\"></img>\n        <div>Hmm, I can't seem to find anything with that search term.</div>\n      </div>\n    );\n  }\n\n  if (results && !results.length) {\n    return (\n      <div id=\"movie-section\" className=\"movie-section empty\">\n        <img src=\"/popcorn.svg\"></img>\n        <div>Search for your favorite movie above, like \"Deadpool\" or \"Interstellar\"!</div>\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"movie-section\" className=\"movie-section\">\n      {results && results.length > 0 && (\n        <p className=\"results-msg\">\n          {results.length} {resultsStr}\n        </p>\n      )}\n      <InfiniteScroll\n        dataLength={results.length}\n        hasMore={page < totalPages}\n        scrollThreshold={'10px'}\n        next={() => dispatch(getMoviesAsync({ query, page: page + 1 }))}\n        loader={\n          <div className=\"bottom-scroll-msg\">Loading some good flicks...</div>\n        }\n        endMessage={\n          <div className=\"bottom-scroll-msg\">You reached the end!</div>\n        }\n      >\n        <div className=\"movie-cols\">\n          {results.map((entry, i) => (\n            <MovieCard key={entry.original_title} entry={entry} />\n          ))}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default MovieSection;\n","const debounce = (func, timeout = 300) => {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n};\n\nexport default debounce;\n","import React, { useEffect, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getMoviesAsync, setQuery } from '../../app/moviesSlice';\nimport debounce from '../../lib/debounce';\nimport './Search.scss';\n\nconst Search = () => {\n  const dispatch = useDispatch();\n  const { query } = useSelector(({ movies: { query } }) => ({\n    query,\n  }));\n\n  const onChangeHandler = useRef(\n    debounce((e) => {\n      const { value } = e.target;\n\n      dispatch(getMoviesAsync({ query: value, page: 1 }));\n      if (!value) {\n        setQuery(value);\n      }\n    }, 800)\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch(getMoviesAsync({ page: 1 }));\n    }, 500);\n  }, []);\n\n  return (\n    <div className=\"search\">\n      <div className=\"control\">\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Search for your favorite movies\"\n            onChange={onChangeHandler.current}\n          ></input>\n          <i className=\"fas fa-search\"></i>\n        </div>\n      </div>\n      {query ? (\n        <div className=\"top-msg\">Searching for movies containing \"{query}\":</div>\n      ) : (\n        <div className=\"top-msg\">Viewing today's popular titles:</div>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport './ScrollToTopBtn.scss';\n\nconst ScollToTopBtn = () => {\n  const [shouldShowBtn, setShouldShowBtn] = useState(false);\n\n  // When the user scrolls down 20px from the top of the document, show the button\n  useEffect(() => {\n    function scrollFunction() {\n      if (\n        document.body.scrollTop > 20 ||\n        document.documentElement.scrollTop > 20\n      ) {\n        setShouldShowBtn(true);\n      } else {\n        setShouldShowBtn(false);\n      }\n    }\n    window.onscroll = function () {\n      scrollFunction();\n    };\n  }, []);\n\n  const onClickHandler = () => {\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n  };\n\n  // When the user clicks on the button, scroll to the top of the document\n  const className = 'scroll-to-top-btn' + ((shouldShowBtn) ? ' show' : '');\n  return (\n    <div className={className} onClick={onClickHandler}>\n      <i className=\"fas fa-arrow-up\"></i>\n      <div>up to top</div>\n    </div>\n  );\n};\n\nexport default ScollToTopBtn;\n","import React from 'react';\nimport './App.scss';\nimport MovieSection from '../MovieSection';\nimport Search from '../Search';\nimport ScrollToTopBtn from '../ScrollToTopBtn';\n\nconst App = () => (\n  <div className=\"app\">\n    <div className=\"titles\">\n      <h1 className=\"muvie-title\">MUVIE</h1>\n      <h2 className=\"muvie-subtitle\">The Movie Database</h2>\n    </div>\n    <Search />\n    <MovieSection />\n    <ScrollToTopBtn />\n  </div>\n);\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport moviesSlice from '../app/moviesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    movies: moviesSlice,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}